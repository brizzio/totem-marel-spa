import React, { useState } from 'react'
import CartList from '../components/List Displayers/Cart Items List Displayer/CartList'






const Payment = () => {

  const [paymentMethod, setPaymentMethod ] = useState(0)



  return (
    <>
    
    <div className='flex flex-col items-start justify-start  border-zinc-600 w-1/2 bg-white mx-2 mt-4 rounded-tl-2xl rounded-tr-2xl'>
        <CartList localStorageKey='items'/>
    </div>
    {paymentMethod==0 && <ChoosePaymentComponent />}
    {paymentMethod==1 && <Bancomat />}
    
    </>
    
  )
}

export default Payment


const ChoosePaymentComponent = () =>{

    const PaymentCard = ({icon, title, id}) =>{

        return(
            <div className=" flex flex-col items-center justify-center h-[8rem]  border border-zinc-200 bg-white shadow-xl rounded-2xl  w-full gap-2" >
                <i className={`${icon} fa-3x`}></i>
                <span className='text-blue font-thin text-2xl px-3 leading-5 text-center '>{title}</span>
            </div>
        )
    
    }

    return(
    <div className='flex flex-col items-start justify-start  border-zinc-600 w-1/2 bg-white mx-2 mt-4 rounded-tl-2xl rounded-tr-2xl'>
        <span className='flex items-center justify-start mt-4 text-white font-thin text-2xl px-6 py-3 text-left w-{8rem} bg-orange-700 rounded-tr-xl rounded-br-xl shadow-xl'>Scegli la forma di pagamento</span>


        <div className=" flex flex-col h-fit items-center border-zinc-600  w-full gap-3 ">

            <div className=" grid grid-flow-row-dense grid-cols-3 grid-rows-1 gap-3 w-full p-3">
                <PaymentCard icon='fa-solid fa-credit-card'
                title='Bancomat o Carte da Credito'
                id={1}/>
                <PaymentCard icon='fa-solid fa-gifts'
                title='Carte Bonus o Gift Cards'
                id={2}/>
                <PaymentCard icon='fa-solid fa-money-check-dollar'
                title='Altri metodi di pagamento'
                id={3}/>
                
                
            </div> 
        </div>
    </div>
    )

}







const Bancomat = (props)=>{
    console.log('bancomat props' , props)

    return(
    <>
    <div className="flex flex-row h-[12rem] w-full bg-white">       
      
      <div className="flex flex-col h-full w-full border-2 items-center">
          <img className="w-[12rem] h-auto justify-center" src={'pos.gif'} alt='Profile'/>
          <div className="flex flex-row h-full items-center justify-end pr-4">
           
          </div>
      </div>
    </div>
    </>

    )
  }



  //dispatch({type:'search', code:readed.code})
      console.log('verify if may add item', ctx.currentCart.cart_id !== '', ctx.currentCart.closed_at=='' , (ctx.currentCart.cart_id !== '' && ctx.currentCart.closed_at=='' && ctx.currentRead.isListed), readed)

      console.log('confirm may add item',ctx.currentCart.cart_id !== '', ctx.currentCart.closed_at=='' , !!ctx.currentRead.isListed,  ctx.currentRead)

        if(ctx.currentCart.cart_id !== '' && ctx.currentCart.closed_at=='' && !!ctx.currentRead.isListed) {
          
          console.log('ctx.currentRead.reference',JSON.stringify(ctx.currentRead.reference))

          let date =new Date()
          let utcTime = date.getTime() + date.getTimezoneOffset()

          let item ={
            ...ctx.currentRead.reference,
            code_type:ctx.currentRead.evaluationType,
            read_id:ctx.currentRead.read_id,
            digits:ctx.currentRead.digits,
            entry_id:new Date(utcTime).toISOString().replace(/\D/g, ''),
            deleted:false,
            date_added: date,
            time_added: utcTime,
            order:'1/1',
            quantity:1,

          }
          console.log('add Item', item)    
          insertItem(item)
          
          
        }



   case 'changeView':
        console.log('change view ...', action.id)
                    
      return {
        ...state,
        view:action.id
      } 
  

      
         
    }

  }
  
  const [ctx, dispatch] = useReducer(ctxReducer, ctxModel)
  
  const init = useCallback(
    () => {
      if(!started.current) dispatch({type:'init'})
    },
    [started.current],
  )

  
  
  

  useEffect(() => {
    console.log('init state')
    init()
  
    return () => {
      console.log('init state useEffect')
    }
  }, [])
  
  
  useMemo(() => {
    
    console.log('readed changed', readed)
    if(readed.code !== '') dispatch({type:'onRead', readed})
      
  }, [readed])

  useMemo(() => {
    
    console.log('open port useMemot', portInfo.current)
    dispatch({type:'onPortOpen', data:{
      hasSerial:true,
      port:portInfo.current,
      isScannerOn:isScannerOn
    }})
    
  }, [portInfo.current])

  useMemo(() => {
    
    console.log('current cart useMemo', portInfo.current)
    dispatch({type:'onCurrentCartUpdate', cart:currentCart})
    
  }, [currentCart])
  
  //const exposeScannerReading = (readed)=> dispatch({type:'onRead', readed})

  //if (loading) return(<Render/>)

  const nav = (view)=>dispatch({type:'changeView', id:view})

  const closeCart= ()=>dispatch({type:'closeCart'})

  console.log('state no App', ctx)
  
  if(ctx.view == 1) return (
    <>
      <Payment total={2.44} nav={nav} />
    </>
  )
  

   useMemo(() => {

    let isClosed = currentCart.status? (currentCart.status =='closed'):false
    console.log('useMemo cart is closed?', isClosed)
    if (isClosed){
      //move current cart to carts an clear current cart
      console.log('closeCartWrapper')
      dispatch({type:'CloseCartWrapper', cart:currentCart})

    }else{
       console.log('current cart useMemo', portInfo.current)
       dispatch({type:'onCurrentCartUpdate', cart:currentCart})
    }
   
  }, [currentCart])



  <AppLayout>
   <SessionDisplay active={session} onClose={closeSession}/>
   <div>------------------------------------------------------------</div>
   <ScannerDisplay init={start} read={readed} port={portInfo} isOn={isScannerOn}/>
   <ReadedDisplay read={readed}  />
   <div>------------------------------------------------------------</div>
    <CtxDisplay state={ctx}/>
   <div>===============================================================</div>
   <div>APPLICATION</div>
   <div>===============================================================</div>
   <div>{ctx.port
      &&<InitCart current={ctx.currentCart} newCart={newCart}/>}
   </div>
   <div>{ctx.port
      &&<ListDisplay cart={ctx.currentCart} deleteCart={()=>dispatch({type:'clearCurrentCart'})} 
      removeItem={(index)=>dispatch({type:'removeItemFromCartList' , key:index})}/>}
   </div>

   <div>{ctx.port
      &&<CloseCartDisplay ctx={ctx} nav={nav} dispatch={closeCartWrapper}/>}
   </div>

   </AppLayout>


   <div>
      {props.isOn?'Scanner is ON':'Scanner is OFF'}<br/>
      {`Port: ${JSON.stringify(props.port.current)}`}
    </div>
    
    <div>
      <p>{`Session Reading Count: ${JSON.stringify(props.read.count)}`}</p>
      {`Code: ${JSON.stringify(props.read.code)}`}
    </div>
    <br/>
    {
      !props.port.current&&<button onClick={initScanner}>Activate Scanner</button>
    }





    ================================

    import React , { useCallback, useEffect, useMemo, useRef, useState }from 'react';


const SearchModal = ({ btnTitle }) =>{ 
    
    
    const [isOpen, setIsOpen] = useState(false);
    const [locked, setLocked] = useState(true);
    
    const modalRef = useRef(null);
  
    const onClose = useCallback(() => {
      setIsOpen(false);
      setLocked(true);
    },[])
    // Eventlistener: trigger onclose when cancel detected
    const onCancel = useCallback(
      (e) => {
        e.preventDefault();
        if (!locked) onClose();
      },
      [locked, onClose]
    );
  
    // Eventlistener: trigger onclose when click outside
    const onClick = useCallback(
      ({ target }) => {
        const { current: el } = modalRef;
        if (target === el && !locked) onClose();
      },
      [locked, onClose]
    );
  
    // when open changes run open/close command
    useEffect(() => {
      const { current: el } = modalRef;
      !!isOpen? el.showModal() : el.close();
    }, [isOpen]);
  
      
  
    return (
      <>
       {!isOpen && <button 
       className="bg-teal-700  py-2 mx-2 rounded-lg shadow-xl text-white font-semibold w-[14rem] text-2xl"
type="button" 
onClick={()=>setIsOpen(true)}>{btnTitle.toUpperCase()}</button>}
        <dialog
          ref={modalRef}
          aria-label={'Dialog'}
          onDismiss={onClose}
          onClose={onClose}
          onCancel={onCancel}
          onClick={onClick}
        >
          <div>
          <p>I'm a locked modal, there's no escaping me.</p>
            <p>Once unlocked clicking outside or pressing esc will close me.</p>
            <button onClick={() => setLocked((b) => !b)}>
              {locked ? "Unlock" : "Lock"}
            </button>
            <button onClick={() => onClose()}>
              CLOSE
            </button>
          </div>
        </dialog>
      </>
      
    );
}
export default SearchModal;